function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.z += sin((pos.x + pos.y) * 4.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color = texture2D(uTexture, vUv);\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec3 pos = position;\n\n  pos.z += sin(uTime * 30.0 + pos.x + pos.y) * 0.1;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uNoise;\nuniform sampler2D uTextureA;\nuniform sampler2D uTextureB;\nuniform vec2 uDirection;\nuniform float uTime;\nuniform float uProgress;\nuniform float uVisibility;\n\nvarying vec2 vUv;\n\nvoid main() {\n  // vec3 color = vec3(0.0, 0.8901960784, 1.0);\n\n  // float e = sin(vUv.y * 0.2 + vUv.x * 1.2 + uTime * 20.0) * 0.6;\n  // color.rgb += e;\n\n  vec4 noise = texture2D(uNoise, vUv);\n\n  vec2 nuv1  = mix(vUv, vec2(noise.r, vUv.y), uProgress);\n  vec2 nuv2  = mix(vUv, vec2(noise.r, vUv.y), 1.0 - uProgress);\n  // vec2 nuv2  = vUv + (vec2(noise.r, 0.0) * (1.0 - uProgress));\n\n  nuv1 -= uDirection * uProgress;\n  nuv2 += uDirection * (1.0 - uProgress);\n\n  // nuv1 = clamp(nuv1, vec2(0.0), vec2(1.0));\n  // nuv2 = clamp(nuv2, vec2(0.0), vec2(1.0));\n\n  vec4 color = vec4(0.0);\n\n  color = mix(texture2D(uTextureA, nuv1), texture2D(uTextureB, nuv2), uProgress);\n\n  // color = mix(color, vec4(0.0), noise * pow(uDissolve, 0.25));\n  // color = texture2D(uTextureA, vUv).rgb;\n\n  color.a *= mix(0.0, 1.0 + pow(noise.r, 20.0), uVisibility);\n\n  gl_FragColor = vec4(color);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  vec3 pos = position;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uWind;\nuniform float uTime;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 color = vec3(0.0, 0.8901960784, 1.0);\n\n  float e = sin(vUv.y * 0.2 + vUv.x * 1.2 + uTime * 20.0) * 0.6;\n  color.rgb += e;\n\n  gl_FragColor = vec4(color, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.x += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform float uProgress;\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 color = texture2D(uTexture, vUv);\n\n  float e = sin(vUv.y * 4.0 + vUv.x * 1.2 + uTime * 20.0) * 0.6;\n  color.rgb += e;\n\n  color.a *= uProgress;\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.1;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform float uShow;\nvarying vec2 vUv;\n\nvoid main() {\n  vec3 color = vec3(0.0, 0.01960784314, 0.4235294118);\n\n  gl_FragColor = vec4(color, uShow);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.z += sin((pos.x + pos.y) * 4.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\n// uniform sampler2D uMask;\nuniform vec2 uRectSize;\nuniform vec2 uImageSize;\nuniform float uProgress;\n// uniform bool uHasMask;\n\nvarying vec2 vUv;\n\n// float vignette(vec2 uv, float a, float b) {\n//   float len = length(uv - 0.5);\n//   // return smoothstep(a, b, len);\n//   return len;\n// }\n\nfloat luminance(vec3 rgb) {\n  const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n  return dot(rgb, W);\n}\n\nvoid main() {\n  vec2 uv = vUv;\n\n  vec2 tuv = mix((uv * 0.97), uv, uProgress);\n  vec4 color = texture2D(uTexture, tuv);\n\n  color.r *= mix(0.9, 1.0, uProgress);\n  color.g *= mix(0.0, 1.0, uProgress);\n  color.b *= mix(0.9, 1.0, uProgress);\n\n  color.rgb += .3 * (1.0 - uProgress);\n\n  // if (uHasMask) {\n  //   color.a = 1.0 - texture2D(uMask, tuv).r;\n  // } else {\n    // float v = length(uv - 0.5);\n    // color.a *= 1.0 - (v * 2.0);\n  // }\n\n  float v = length(uv - 0.5);\n  float vignette = (v * 2.0);\n\n  color.a *= 1.0 - vignette;\n\n  color.a = clamp(color.a, 0.0, 1.0);\n  color.a *= uProgress;\n\n  gl_FragColor = color;\n  \n  // gl_FragColor = vec4(vec3(alp), 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos.z += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.3;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\nuniform sampler2D uWind;\nuniform vec2 uRectSize;\nuniform vec2 uImageSize;\nuniform float uTime;\nuniform float uProgress;\nuniform float uScale;\nuniform float uShow;\n\nvarying vec2 vUv;\n\nvec4 coverTexture(vec2 ruv) {\n  vec2 s = uRectSize;\n  vec2 i = uImageSize;\n\n  float rs = s.x / s.y;\n  float ri = i.x / i.y;\n  vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n  vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n\n  offset.y += sin(uTime * 1.2) * 0.1;\n  offset.x += cos(uTime * 2.3) * 0.08;\n\n  vec2 uv = ruv * s / new + offset;\n\n  // vec4 color = texture2D(uTexture, uv);\n  // float gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));\n  // // float gray = dot(color.rgb, vec3(0.3333, 0.3333, 0.3333));\n\n  // vec3 duo = mix(\n  //   vec3(0.0, 1.0/255.0, 21.0/255.0),\n  //   vec3(0, 0.8901960784, 1.0),\n  //   gray\n  // );\n\n  // return vec4(\n  //   mix(color.rgb, duo, duotone),\n  //   1.0\n  // );\n\n  return texture2D(uTexture, uv);\n}\n\nvoid main() {\n  vec4 color = vec4(1.0);\n\n  if (uProgress > 0.0 || uScale > 0.0) {\n    vec2 ruv = vUv;\n    vec4 wind = texture2D(uWind, vUv.yx);\n    ruv.y = mix(vUv.y, wind.r - 0.2, uProgress * 0.4);\n\n    ruv -= 0.5;\n    ruv *= mix(1.0, 0.95, uScale);\n    ruv += 0.5;\n\n    // color = coverTexture(ruv);\n    color.r = coverTexture(ruv + vec2(0.0, 0.005) * (uProgress)).r;\n    color.g = coverTexture(ruv + vec2(0.0, 0.01) * (uProgress)).g;\n    color.b = coverTexture(ruv + vec2(0.0, 0.02) * (uProgress)).b;\n\n  } else {\n    color = coverTexture(vUv);\n  }\n\n  color.rgb *= smoothstep(0.0, 0.4, vUv.y);\n  color.a = uShow;\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n\n  // pos.y += sin((pos.x + pos.y + (uTime * 30.0)) * 0.05) * 5.0;\n  vec3 pos = position;\n\n  // pos += sin((pos.x + pos.y) * 0.8 + uTime * 10.0) * 0.1;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uWind;\nuniform float uProgress;\nuniform float uShow;\nuniform float uClipping;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vec4 wind = texture2D(uWind, vUv);\n  // wind.r = pow(wind.r, 10.0);\n  // wind.r = clamp(wind.r, 0.0, 1.0);\n\n  vec3 idle = vec3(1.0);\n  vec3 hover = vec3(0.0, 0.8901960784, 1.0);\n\n  // float p = uProgress + wind.r;\n\n  // p = clamp(p, 0.0, 1.0);\n\n  vec3 color = mix(idle, hover, wind.r - (1.0 - uProgress));\n\n  if (vUv.y > uClipping) {\n    discard;\n  }\n\n  gl_FragColor = vec4(color, uShow);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D uTexture;\nuniform float uTime;\nvarying vec2 vUv;\n\nvoid main() {\n  gl_FragColor = texture2D(uTexture, vUv);\n  gl_FragColor.a *= 0.07;\n\n  gl_FragColor.a *= 1.0 + ((sin(uTime * 0.3 + vUv.x * 14.0) + 1.0) / 2.0) * 2.0;\n\n  // gl_FragColor = vec4(vUv, 1.0, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec2 uv;\nattribute vec3 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D texture;\nuniform sampler2D uImage;\nuniform float uSpeed;\nuniform float uTime;\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n  vec4 current = texture2D(texture, uv);\n  vec4 data = texture2D(uImage, uv);\n\n  current += data;\n  current.a *= 0.86;// + (uSpeed * 0.02);\n\n  gl_FragColor = current;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float uTime;\nuniform sampler2D uData;\n\nattribute float position;\n\nvarying float vInfo;\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\n// attribute vec3 position;\n\nvoid main() {\n  vec4 data = texture2D(uData, vec2(position, 0.0));\n  vec3 pos = data.xyz;\n\n  vInfo = data.a;\n\n  // vec3 pos = position;\n\n  // pos.y += uTime * .9;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n  gl_PointSize = mix(0.8, 1.0, when_gt(fract(vInfo), 0.8));\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nvarying float vInfo;\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvoid main() {\n\n  vec3 color = vec3(0.584,0.052,0.880);\n\n  // color = mix(color, vec3(0.0, 0.8901960784, 1.0), when_gt(vInfo, 1.0));\n  // // color = mix(color, vec3(1.0), when_gt(vInfo, 2.0));\n  // color = mix(color, vec3(1.0, 0.0, 0.0), when_gt(vInfo, 3.0));\n\n  gl_FragColor = vec4(color, 1.0);\n\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform float uTime;\nuniform float uSpeed;\nuniform sampler2D texture;\nuniform vec2 uPointer;\n\nvoid main() {\n  // float pixelHeight = 1.0 / RESOLUTION.y;\n  // float pixelWidth = 1.0 / RESOLUTION.x;\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n  vec4 current = texture2D(texture, uv);\n\n  // dist = min(1.0, dist);\n\n  // float dist = distance(uPointer.xy, current.xy);\n  // vec2 angle = normalize(uPointer) - normalize(current.xy);\n\n  float speed = max(-.004, -uSpeed * 0.05);\n  current.y += .01 + speed;\n  // current.x -= (angle.x * 0.01);\n\n  // float forceAngle = 1.0 - smoothstep(0.0, 1.2, dist);\n  // current.xy -= (angle.xy * 0.01) * forceAngle;\n\n  if (current.y > 5.0) {\n    current.y = -5.0;\n  }\n\n  gl_FragColor = current;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\n\nattribute vec3 position;\nattribute vec2 uv;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uTexture;\nuniform sampler2D uNoise;\nuniform float uForce;\nuniform float uOpacity;\n\nvarying vec2 vUv;\n\nvoid main() {\n  float noise = texture2D(uNoise, vec2(vUv.y, vUv.x)).r;\n  vec2 nuv  = vUv + (vec2(0.0, noise) * uForce);\n  vec4 color = texture2D(uTexture, nuv);\n  color.a *= uOpacity;\n\n  gl_FragColor = color;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform float uTime;\nuniform sampler2D texture;\nuniform sampler2D uWind;\nuniform sampler2D uTrail;\n\nvoid main() {\n  float pixelHeight = 1.0 / RESOLUTION.y;\n  float pixelWidth = 1.0 / RESOLUTION.x;\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n\n  vec4 current = texture2D(texture, uv);\n  vec4 wind = texture2D(uWind, uv);\n  vec4 trail = texture2D(uTrail, uv);\n\n  // Initial set - todo, set initial data!\n  if (current.a <= 0.9) {\n    current = vec4(uv, 0.0, 1.0);\n  }\n\n  // current.z = 0.0; // speed\n\n  // if (current.x < wind.x) {\n  //   current.z += wind.x - current.x;\n  //   current.x += 0.05 * pow(current.z, 2.0);\n  // }\n\n  if (current.y < wind.y) {\n    current.z = wind.y - current.y;\n    current.y += 0.05 * pow(current.z, 2.0);\n  }\n\n  float t = trail.r * 0.1;\n  // t += trail.r * trail.a;\n\n  float x = (uv.x * 2.0) + uTime * 0.20;\n  float noise = (sin(x) + sin(2.2 * x + 5.52) + sin(2.9 * x + 0.93) + sin(4.6 * x + 8.94)) / 4.0;\n  noise *= 0.3;\n  t = mix(t, t + noise, 0.1);\n\n  t = clamp(t, 0.0, 1.0);\n\n  current.xy = mix(current.xy, uv, t);\n\n  gl_FragColor = current;\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nuniform sampler2D uScene;\nuniform sampler2D uTrail;\n// uniform sampler2D uWind;\nuniform vec2 uResolution;\nuniform vec4 uRectSmall;\nuniform float uTime;\nuniform float uSpeed;\nuniform float uGlitch;\nuniform float uSmallGlitch;\nuniform float uDarken;\n\n// #ifdef FXAA\n//   #pragma glslify: fxaa = require(glsl-fxaa)\n// #endif\n\nfloat random(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat parabola( float x, float k )\n{\n    return pow( 4.0*x*(1.0-x), k );\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n// glitch\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n      return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n            + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nconst float interval = 0.0;\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nvec4 glitch(vec3 color, float time, vec2 vUv, vec2 resolution){\n\n  float gli = uGlitch;\n\n                   // x1  y1   x2   y2\n  vec4 rect = uRectSmall;//vec4(0.2, 0.3, 0.4, 0.5);\n  vec2 hv = step(rect.xy, vUv) * step(vUv, rect.zw);\n  float onOff = hv.x * hv.y;\n\n  gli += onOff;\n\n  float sizeRectMultiplier = mix(1.0, 7.0, onOff);\n\n  time *= mix(1.0, 1.5, onOff);\n\n  float dynamica = mix(0.2, 0.8, gli);\n  float dynamicb = mix(0.12, 0.3, gli);\n\n  float strength = smoothstep(interval * 0.5, interval, interval - mod(time, interval)) * 0.2; // this 0.2\n  float y = vUv.y * resolution.y;\n  float rgbWave = 0.0;\n\n  float rgbDiff = (6.0 + sin(time * 500.0 + vUv.y * 40.0) * (20.0 * strength + 1.0)) / resolution.x;\n\n  float dn = dynamicb; //0.12;\n\n  // float whiteNoise = (random(vUv + mod(time, 10.0)) * 2.0 - 1.0) * (0.15 + strength * 0.15);\n  float bnTime = floor(time * 20.0) * 200.0;\n  float noiseX = step((snoise3(vec3(0.0, vUv.x * (3.0 * sizeRectMultiplier), bnTime)) + 1.0) / 2.0, dn + strength * 0.3);\n  float noiseY = step((snoise3(vec3(0.0, vUv.y * (3.0 * sizeRectMultiplier), bnTime)) + 1.0) / 2.0, dn + strength * 0.3);\n  float bnMask = noiseX * noiseY;\n  float bnUvX = vUv.x + sin(bnTime) * 0.2 + rgbWave;\n  float bnR = texture2D(uScene, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask;\n  float bnG = texture2D(uScene, vec2(bnUvX, vUv.y)).g * bnMask;\n  float bnB = texture2D(uScene, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask;\n  vec4 blockNoise = vec4(bnR, bnG, bnB, 1.0);\n\n  float bnTime2 = floor(time * 25.0) * 300.0;\n  float noiseX2 = step((snoise3(vec3(0.0, vUv.x * (2.0 * sizeRectMultiplier), bnTime2)) + 1.0) / 2.0, dn + strength * 0.5);\n  float noiseY2 = step((snoise3(vec3(0.0, vUv.y * (8.0 * sizeRectMultiplier), bnTime2)) + 1.0) / 2.0, dn + strength * 0.3);\n  float bnMask2 = noiseX2 * noiseY2;\n  float bnR2 = texture2D(uScene, vec2(bnUvX + rgbDiff, vUv.y)).r * bnMask2;\n  float bnG2 = texture2D(uScene, vec2(bnUvX, vUv.y)).g * bnMask2;\n  float bnB2 = texture2D(uScene, vec2(bnUvX - rgbDiff, vUv.y)).b * bnMask2;\n  vec4 blockNoise2 = vec4(bnR2, bnG2, bnB2, 1.0);\n\n  return vec4(color, 1.0) * (1.0 - bnMask - bnMask2) + (blockNoise + blockNoise2);\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / uResolution.xy;\n  // vec4 wind = texture2D(uWind, uv.yx);\n  vec4 trail = texture2D(uTrail, uv);\n\n  // float force = parabola(uv.y, 6.0);\n\n  // force = force * map(force, 0.0, 1.0, -1.0, 1.0);\n\n  // uv.x += force * 0.1;\n\n  float force = uSpeed;\n  force = min(force, 3.0);\n\n  force *= 0.5;\n\n  float nUvY = pow(1.- uv.y * 1.2, 10.) * force;\n  float curve = max(0., nUvY) + 1.0;\n  curve = map(curve, 1.0, 5.0, 1.0, 2.0);\n\n  float p = ((curve - 1.0)/2.0/curve);\n  uv.x = uv.x/curve + p;\n\n  // uv.y = mix(uv.y, wind.r, nUvY * 0.5);\n\n  vec2 offsetr = vec2(trail.r * 0.003);\n  vec2 offsetg = vec2(trail.r * 0.005);\n  vec2 offsetb = vec2(trail.r * 0.007);\n\n  float r = texture2D(uScene, uv.xy + offsetr).x;\n  float g = texture2D(uScene, uv.xy + offsetg).y;\n  float b = texture2D(uScene, uv.xy + offsetb).z;\n\n  vec3 color = vec3(r, g, b);\n\n  color = glitch(color, uTime, uv, uResolution).rgb;\n\n  // #ifdef FXAA\n  //   vec3 color = fxaa(uScene, gl_FragCoord.xy, uResolution).rgb;\n  // #else\n  //   vec3 color = texture2D(uScene, uv).rgb;\n  // #endif\n\n  // color = linearToneMapping(color);\n\n  float n = random(uv + mod(uTime, 3.0));\n  // color += n * 0.08;\n  color *= 1.0 + (n * 0.2);\n  \n\n  // color += trail.r * 0.05;\n\n  color *= 1.0 + (trail.r * 0.14);\n  color += trail.r * 0.02;\n\n  // color = vec3(0.0);\n  // color.r = nUvY;\n\n  color *= mix(1.0, 2.2 + (n * 0.02), uDarken);\n  color.r *= mix(1.0, 0.9, uDarken);\n  color.g *= mix(1.0, 0.8, uDarken);\n  color.b *= mix(1.0, 0.7, uDarken);\n  // color.g *= mix(1.0, 0.8, uDarken);\n\n  gl_FragColor = vec4(color, 1.0);\n}\n"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\nattribute vec2 position;\n\nvoid main() {\n  gl_Position = vec4(position, 1.0, 1.0);\n}"
}, function(e, t, n) {
    "use strict";
    n.r(t), t.default = "precision highp float;\n#define GLSLIFY 1\n\nuniform sampler2D texture;\n// uniform sampler2D uNoise;\nuniform vec2 uPointer;\nuniform vec2 uPrevPointer;\nuniform float uSpeed;\nuniform float uRatio;\n\n// uniform vec4 uRect;\n// uniform float uRectForce;\n\nfloat circle(vec2 uv, vec2 disc_center, float disc_radius, float border_size) {\n  uv -= disc_center;\n  float dist = sqrt(dot(uv, uv));\n  return smoothstep(disc_radius+border_size, disc_radius-border_size, dist);\n}\n\n// float rand(vec2 co){\n//   return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n// }\n\n// vec2 rot2d( vec2 p, float a ) {\n//   vec2 sc = vec2(sin(a),cos(a));\n//   return vec2( dot( p, vec2(sc.y, -sc.x) ), dot( p, sc.xy ) );\n// }\n\n// https://stackoverflow.com/questions/12751080/glsl-point-inside-box-test\n// float inside_rectangle_smooth(vec2 p, vec2 bottom_left, vec2 top_right, float transition_area)\n// {\n//     vec2 s = smoothstep(bottom_left, bottom_left + vec2(transition_area), p) -\n//              smoothstep(top_right - vec2(transition_area), top_right, p);\n//     return(s.x * s.y);\n// }\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / RESOLUTION.xy;\n  vec4 color = texture2D(texture, uv + vec2(0.0, -0.002));\n\n  // float rnd = 6.28 * rand( uv * 0.2 /*+fract(iGlobalTime)*/ );\n  // vec2 rand2 = rot2d(vec2(1.0, 0.0), rnd) * 0.1;\n\n  vec2 center = uPointer;\n  uv.x *= uRatio;\n  center.x *= uRatio;\n\n  color.r += circle(uv, center, 0.0, 0.1) * uSpeed;\n  color.r = mix(color.r, 0.0, .009);\n  color.r = clamp(color.r, 0.0, 1.0);\n\n  // color.gb = uPointer - color.gb;\n  // color.gb =\n  // color.a = dot(normalize(uPointer), normalize(color.gb));\n\n  // color.a = color.r * dot(normalize(uPointer), normalize(uPrevPointer));\n  // color.g = color.r * 20.0 * dot(normalize(uPointer), normalize(uPrevPointer));\n\n  color.g = color.r * 5.0;\n\n  // Hover rect\n  // if (uRectForce > 0.0) {\n  //   // vec4 rect = vec4(0.2, 0.3, 0.4, 0.5);\n  //   vec4 rect = uRect;\n  //   // vec2 hv = step(rect.xy, uv) * step(uv, rect.zw);\n  //   // float onOff = hv.x * hv.y;\n\n  //   // float f = uRectForce;\n\n  //   // f += texture2D(uNoise, uv).r * 0.4;\n\n  //   float r = inside_rectangle_smooth(uv, rect.xy, rect.zw, 0.4);\n\n  //   color.r += r;\n  // }\n\n  gl_FragColor = color;\n}\n"
}
